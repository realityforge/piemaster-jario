package net.piemaster.jario.systems.delayed;

import org.newdawn.slick.util.Log;

import net.piemaster.jario.components.Health;
import net.piemaster.jario.components.Timer;
import net.piemaster.jario.systems.TimerSystem;

import com.artemis.ComponentMapper;
import com.artemis.Entity;
import com.artemis.EntityManager;
import com.artemis.World;

public class InvulnerabilityHandler implements ListenerSystem
{
	private static ComponentMapper<Health> healthMapper;

	private static final String INVULN_TIMEOUT_TRIGGER = "uninvulnerable";
	private static final String VULN_TIMEOUT_TRIGGER = "invulnerable";

	public InvulnerabilityHandler(World world)
	{
		this(world.getEntityManager());
	}

	public InvulnerabilityHandler(EntityManager em)
	{
		healthMapper = new ComponentMapper<Health>(Health.class, em);
	}

	@Override
	public void process(Entity e, String trigger)
	{
		setInvulnerability(e, (trigger == INVULN_TIMEOUT_TRIGGER) ? false : true);
	}

	public void setInvulnerability(Entity e, boolean on)
	{
		Health health = healthMapper.get(e);
		if (health != null)
		{
			if (on)
			{
				health.setInvulnerable(true);
			}
			else
			{
				health.setInvulnerable(false);
			}
		}
		else
		{
			Log.warn("Cannot set invulnerability on Entity " + e + ": Health component missing.");
		}
	}

	/**
	 * Static utility method for setting temporary invulnerability on an entity.
	 * 
	 * @param e
	 *            The entity to make invulnerable.
	 * @param duration
	 *            The duration of the temporary invulnerability.
	 */
	public static void setTemporaryInvulnerability(World world, Entity e, int duration, boolean on)
	{
		InvulnerabilityHandler handler = new InvulnerabilityHandler(world);
		// Set invulnerability
		handler.setInvulnerability(e, on);
		
		// Register to unset later
		String trigger = on ? INVULN_TIMEOUT_TRIGGER : VULN_TIMEOUT_TRIGGER;
		e.getComponent(Timer.class).registerTrigger(duration, trigger);
		world.getSystemManager().getSystem(TimerSystem.class).register(trigger, handler);
	}
}
