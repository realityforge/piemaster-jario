package net.piemaster.jario.systems.delayed;

import net.piemaster.jario.components.Invulnerable;
import net.piemaster.jario.components.Timer;
import net.piemaster.jario.systems.SoundSystem;
import net.piemaster.jario.systems.TimerSystem;

import com.artemis.ComponentMapper;
import com.artemis.Entity;
import com.artemis.World;

public class InvulnerabilityHandler implements ListenerSystem
{
	private ComponentMapper<Invulnerable> invulnMapper;

	private static final String INVULN_TIMEOUT_TRIGGER = "uninvulnerable";
	private static final String VULN_TIMEOUT_TRIGGER = "invulnerable";
	private static final String STAR_MUSIC_KEY = "star_music";

	public InvulnerabilityHandler(World world)
	{
		invulnMapper = new ComponentMapper<Invulnerable>(Invulnerable.class, world);
	}

	@Override
	public void process(Entity e, String trigger)
	{
		setInvulnerability(e, (trigger == INVULN_TIMEOUT_TRIGGER) ? false : true);
	}

	public void setInvulnerability(Entity e, boolean on, boolean deadly)
	{
		Invulnerable invuln = invulnMapper.get(e);
		if ((invulnMapper.get(e) != null) != on)
		{
			if (on)
			{
				if(deadly)
				{
					SoundSystem.pushLoop(STAR_MUSIC_KEY, SoundSystem.STAR_MUSIC, e);
					SoundSystem.pauseMusic();
				}
				e.addComponent(new Invulnerable(deadly));
				e.refresh();
			}
			else
			{
				e.removeComponent(invuln);
				SoundSystem.stopLoop(e.getId(), STAR_MUSIC_KEY);
				SoundSystem.resumeMusic();
			}
		}
	}

	public void setInvulnerability(Entity e, boolean on)
	{
		setInvulnerability(e, on, false);
	}

	/**
	 * Static utility method for setting temporary invulnerability on an entity.
	 * 
	 * @param e
	 *            The entity to make invulnerable.
	 * @param duration
	 *            The duration of the temporary invulnerability.
	 */
	public static void setTemporaryInvulnerability(World world, Entity e, int duration, boolean on,
			boolean deadly)
	{
		InvulnerabilityHandler handler = new InvulnerabilityHandler(world);
		// Set invulnerability
		handler.setInvulnerability(e, on, deadly);

		// Register to unset later
		String trigger = on ? INVULN_TIMEOUT_TRIGGER : VULN_TIMEOUT_TRIGGER;
		Timer timer = e.getComponent(Timer.class);
		
		// TODO Make this more safe and elegant
		// Remove any existing triggers
		timer.unregisterTrigger(INVULN_TIMEOUT_TRIGGER);
		timer.unregisterTrigger(VULN_TIMEOUT_TRIGGER);
		// Add the new trigger
		timer.registerTrigger(duration, trigger);
		world.getSystemManager().getSystem(TimerSystem.class).register(trigger, handler);
	}

	public static void setTemporaryInvulnerability(World world, Entity e, int duration, boolean on)
	{
		setTemporaryInvulnerability(world, e, duration, on, false);
	}
}
